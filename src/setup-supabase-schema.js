import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  { auth: { persistSession: false } }
);

async function setupChatHistoryTable() {
  console.log('Testing chat_history table in Supabase...');

  try {
    // Test if the table exists by trying to query it
    const { data, error } = await supabase
      .from('chat_history')
      .select('id')
      .limit(1);

    if (error && error.code === 'PGRST205') {
      console.log('❌ chat_history table does not exist');
      console.log('Please run the following SQL in your Supabase SQL editor:');
      console.log(`
-- Chat history table
CREATE TABLE IF NOT EXISTS chat_history (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_email VARCHAR(255) NOT NULL,
  prompt TEXT NOT NULL,
  answer TEXT NOT NULL,
  doc_id UUID,
  sources JSONB DEFAULT '[]'::jsonb,
  images JSONB DEFAULT '[]'::jsonb,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enable RLS for chat history
ALTER TABLE chat_history ENABLE ROW LEVEL SECURITY;

-- Indexes for chat history
CREATE INDEX IF NOT EXISTS idx_chat_history_user_email ON chat_history(user_email);
CREATE INDEX IF NOT EXISTS idx_chat_history_created_at ON chat_history(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_chat_history_doc_id ON chat_history(doc_id);
      `);
      return;
    } else if (error) {
      console.error('Error checking table:', error);
      return;
    }

    console.log('✅ chat_history table exists!');
    
    // Test the table by inserting a test record
    const { error: insertError } = await supabase
      .from('chat_history')
      .insert({
        user_email: 'test@example.com',
        prompt: 'Test prompt',
        answer: 'Test answer'
      });

    if (insertError) {
      console.error('Error testing table:', insertError);
      return;
    }

    console.log('✅ Table test successful!');

    // Clean up test record
    const { error: deleteError } = await supabase
      .from('chat_history')
      .delete()
      .eq('user_email', 'test@example.com')
      .eq('prompt', 'Test prompt');

    if (deleteError) {
      console.error('Error cleaning up test record:', deleteError);
    } else {
      console.log('✅ Test record cleaned up');
    }

  } catch (error) {
    console.error('Setup failed:', error);
  }
}

setupChatHistoryTable();
